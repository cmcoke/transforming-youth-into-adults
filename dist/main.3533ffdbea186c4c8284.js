(()=>{var e={90:e=>{!function(t,n){var i=function(e,t,n){"use strict";var i,a;if(function(){var t,n={lazyClass:"lazyload",loadedClass:"lazyloaded",loadingClass:"lazyloading",preloadClass:"lazypreload",errorClass:"lazyerror",autosizesClass:"lazyautosizes",fastLoadedClass:"ls-is-cached",iframeLoadMode:0,srcAttr:"data-src",srcsetAttr:"data-srcset",sizesAttr:"data-sizes",minSize:40,customMedia:{},init:!0,expFactor:1.5,hFac:.8,loadMode:2,loadHidden:!0,ricTimeout:0,throttleDelay:125};for(t in a=e.lazySizesConfig||e.lazysizesConfig||{},n)t in a||(a[t]=n[t])}(),!t||!t.getElementsByClassName)return{init:function(){},cfg:a,noSupport:!0};var r,o,s,l,c,d,u,f,v,y,m,h,g,p,z,b,C,A,E,L,_,w,M,N,x,S,T,W,k,B,F,O,R,q,D,P,I,H,$,j,U,G,J,K,Q=t.documentElement,V=e.HTMLPictureElement,X="addEventListener",Y=e.addEventListener.bind(e),Z=e.setTimeout,ee=e.requestAnimationFrame||Z,te=e.requestIdleCallback,ne=/^picture$/i,ie=["load","error","lazyincluded","_lazyloaded"],ae={},re=Array.prototype.forEach,oe=function(e,t){return ae[t]||(ae[t]=new RegExp("(\\s|^)"+t+"(\\s|$)")),ae[t].test(e.getAttribute("class")||"")&&ae[t]},se=function(e,t){oe(e,t)||e.setAttribute("class",(e.getAttribute("class")||"").trim()+" "+t)},le=function(e,t){var n;(n=oe(e,t))&&e.setAttribute("class",(e.getAttribute("class")||"").replace(n," "))},ce=function(e,t,n){var i=n?X:"removeEventListener";n&&ce(e,t),ie.forEach((function(n){e[i](n,t)}))},de=function(e,n,a,r,o){var s=t.createEvent("Event");return a||(a={}),a.instance=i,s.initEvent(n,!r,!o),s.detail=a,e.dispatchEvent(s),s},ue=function(t,n){var i;!V&&(i=e.picturefill||a.pf)?(n&&n.src&&!t.getAttribute("srcset")&&t.setAttribute("srcset",n.src),i({reevaluate:!0,elements:[t]})):n&&n.src&&(t.src=n.src)},fe=function(e,t){return(getComputedStyle(e,null)||{})[t]},ve=function(e,t,n){for(n=n||e.offsetWidth;n<a.minSize&&t&&!e._lazysizesWidth;)n=t.offsetWidth,t=t.parentNode;return n},ye=(U=[],G=j=[],K=function(e,n){H&&!n?e.apply(this,arguments):(G.push(e),$||($=!0,(t.hidden?Z:ee)(J)))},K._lsFlush=J=function(){var e=G;for(G=j.length?U:j,H=!0,$=!1;e.length;)e.shift()();H=!1},K),me=function(e,t){return t?function(){ye(e)}:function(){var t=this,n=arguments;ye((function(){e.apply(t,n)}))}},he=function(e){var t,i,a=function(){t=null,e()},r=function(){var e=n.now()-i;e<99?Z(r,99-e):(te||a)(a)};return function(){i=n.now(),t||(t=Z(r,99))}},ge=(C=/^img$/i,A=/^iframe$/i,E="onscroll"in e&&!/(gle|ing)bot/.test(navigator.userAgent),0,L=0,_=0,w=-1,M=function(e){_--,(!e||_<0||!e.target)&&(_=0)},N=function(e){return null==b&&(b="hidden"==fe(t.body,"visibility")),b||!("hidden"==fe(e.parentNode,"visibility")&&"hidden"==fe(e,"visibility"))},x=function(e,n){var i,a=e,r=N(e);for(h-=n,z+=n,g-=n,p+=n;r&&(a=a.offsetParent)&&a!=t.body&&a!=Q;)(r=(fe(a,"opacity")||1)>0)&&"visible"!=fe(a,"overflow")&&(i=a.getBoundingClientRect(),r=p>i.left&&g<i.right&&z>i.top-1&&h<i.bottom+1);return r},T=function(e){var t,i=0,r=a.throttleDelay,o=a.ricTimeout,s=function(){t=!1,i=n.now(),e()},l=te&&o>49?function(){te(s,{timeout:o}),o!==a.ricTimeout&&(o=a.ricTimeout)}:me((function(){Z(s)}),!0);return function(e){var a;(e=!0===e)&&(o=33),t||(t=!0,(a=r-(n.now()-i))<0&&(a=0),e||a<9?l():Z(l,a))}}(S=function(){var e,n,r,o,s,l,u,v,C,A,M,S,T=i.elements;if((f=a.loadMode)&&_<8&&(e=T.length)){for(n=0,w++;n<e;n++)if(T[n]&&!T[n]._lazyRace)if(!E||i.prematureUnveil&&i.prematureUnveil(T[n]))q(T[n]);else if((v=T[n].getAttribute("data-expand"))&&(l=1*v)||(l=L),A||(A=!a.expand||a.expand<1?Q.clientHeight>500&&Q.clientWidth>500?500:370:a.expand,i._defEx=A,M=A*a.expFactor,S=a.hFac,b=null,L<M&&_<1&&w>2&&f>2&&!t.hidden?(L=M,w=0):L=f>1&&w>1&&_<6?A:0),C!==l&&(y=innerWidth+l*S,m=innerHeight+l,u=-1*l,C=l),r=T[n].getBoundingClientRect(),(z=r.bottom)>=u&&(h=r.top)<=m&&(p=r.right)>=u*S&&(g=r.left)<=y&&(z||p||g||h)&&(a.loadHidden||N(T[n]))&&(d&&_<3&&!v&&(f<3||w<4)||x(T[n],l))){if(q(T[n]),s=!0,_>9)break}else!s&&d&&!o&&_<4&&w<4&&f>2&&(c[0]||a.preloadAfterLoad)&&(c[0]||!v&&(z||p||g||h||"auto"!=T[n].getAttribute(a.sizesAttr)))&&(o=c[0]||T[n]);o&&!s&&q(o)}}),k=me(W=function(e){var t=e.target;t._lazyCache?delete t._lazyCache:(M(e),se(t,a.loadedClass),le(t,a.loadingClass),ce(t,B),de(t,"lazyloaded"))}),B=function(e){k({target:e.target})},F=function(e,t){var n=e.getAttribute("data-load-mode")||a.iframeLoadMode;0==n?e.contentWindow.location.replace(t):1==n&&(e.src=t)},O=function(e){var t,n=e.getAttribute(a.srcsetAttr);(t=a.customMedia[e.getAttribute("data-media")||e.getAttribute("media")])&&e.setAttribute("media",t),n&&e.setAttribute("srcset",n)},R=me((function(e,t,n,i,r){var o,s,l,c,d,f;(d=de(e,"lazybeforeunveil",t)).defaultPrevented||(i&&(n?se(e,a.autosizesClass):e.setAttribute("sizes",i)),s=e.getAttribute(a.srcsetAttr),o=e.getAttribute(a.srcAttr),r&&(c=(l=e.parentNode)&&ne.test(l.nodeName||"")),f=t.firesLoad||"src"in e&&(s||o||c),d={target:e},se(e,a.loadingClass),f&&(clearTimeout(u),u=Z(M,2500),ce(e,B,!0)),c&&re.call(l.getElementsByTagName("source"),O),s?e.setAttribute("srcset",s):o&&!c&&(A.test(e.nodeName)?F(e,o):e.src=o),r&&(s||c)&&ue(e,{src:o})),e._lazyRace&&delete e._lazyRace,le(e,a.lazyClass),ye((function(){var t=e.complete&&e.naturalWidth>1;f&&!t||(t&&se(e,a.fastLoadedClass),W(d),e._lazyCache=!0,Z((function(){"_lazyCache"in e&&delete e._lazyCache}),9)),"lazy"==e.loading&&_--}),!0)})),q=function(e){if(!e._lazyRace){var t,n=C.test(e.nodeName),i=n&&(e.getAttribute(a.sizesAttr)||e.getAttribute("sizes")),r="auto"==i;(!r&&d||!n||!e.getAttribute("src")&&!e.srcset||e.complete||oe(e,a.errorClass)||!oe(e,a.lazyClass))&&(t=de(e,"lazyunveilread").detail,r&&pe.updateElem(e,!0,e.offsetWidth),e._lazyRace=!0,_++,R(e,t,r,i,n))}},D=he((function(){a.loadMode=3,T()})),I=function(){d||(n.now()-v<999?Z(I,999):(d=!0,a.loadMode=3,T(),Y("scroll",P,!0)))},{_:function(){v=n.now(),i.elements=t.getElementsByClassName(a.lazyClass),c=t.getElementsByClassName(a.lazyClass+" "+a.preloadClass),Y("scroll",T,!0),Y("resize",T,!0),Y("pageshow",(function(e){if(e.persisted){var n=t.querySelectorAll("."+a.loadingClass);n.length&&n.forEach&&ee((function(){n.forEach((function(e){e.complete&&q(e)}))}))}})),e.MutationObserver?new MutationObserver(T).observe(Q,{childList:!0,subtree:!0,attributes:!0}):(Q.addEventListener("DOMNodeInserted",T,!0),Q.addEventListener("DOMAttrModified",T,!0),setInterval(T,999)),Y("hashchange",T,!0),["focus","mouseover","click","load","transitionend","animationend"].forEach((function(e){t.addEventListener(e,T,!0)})),/d$|^c/.test(t.readyState)?I():(Y("load",I),t.addEventListener("DOMContentLoaded",T),Z(I,2e4)),i.elements.length?(S(),ye._lsFlush()):T()},checkElems:T,unveil:q,_aLSL:P=function(){3==a.loadMode&&(a.loadMode=2),D()}}),pe=(o=me((function(e,t,n,i){var a,r,o;if(e._lazysizesWidth=i,i+="px",e.setAttribute("sizes",i),ne.test(t.nodeName||""))for(r=0,o=(a=t.getElementsByTagName("source")).length;r<o;r++)a[r].setAttribute("sizes",i);n.detail.dataAttr||ue(e,n.detail)})),s=function(e,t,n){var i,a=e.parentNode;a&&(n=ve(e,a,n),(i=de(e,"lazybeforesizes",{width:n,dataAttr:!!t})).defaultPrevented||(n=i.detail.width)&&n!==e._lazysizesWidth&&o(e,a,i,n))},{_:function(){r=t.getElementsByClassName(a.autosizesClass),Y("resize",l)},checkElems:l=he((function(){var e,t=r.length;if(t)for(e=0;e<t;e++)s(r[e])})),updateElem:s}),ze=function(){!ze.i&&t.getElementsByClassName&&(ze.i=!0,pe._(),ge._())};return Z((function(){a.init&&ze()})),i={cfg:a,autoSizer:pe,loader:ge,init:ze,uP:ue,aC:se,rC:le,hC:oe,fire:de,gW:ve,rAF:ye}}(t,t.document,Date);t.lazySizes=i,e.exports&&(e.exports=i)}("undefined"!=typeof window?window:{})}},t={};function n(i){var a=t[i];if(void 0!==a)return a.exports;var r=t[i]={exports:{}};return e[i](r,r.exports,n),r.exports}(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n(90),new(function(){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.overlay=document.querySelector(".overlay"),this.mainNav=document.querySelector(".main-nav"),this.menuIcon=document.querySelector(".header__menu-icon"),this.events()}var n,i;return n=t,(i=[{key:"events",value:function(){var e=this;this.menuIcon.addEventListener("click",(function(){return e.toggleTheMenu()}))}},{key:"toggleTheMenu",value:function(){this.menuIcon.classList.toggle("header__menu-icon--close-x"),this.overlay.classList.contains("overlay--is-open")?(document.body.style.overflow="visible",this.overlay.classList.remove("overlay--is-open"),this.mainNav.style.display="none"):(document.body.style.overflow="hidden",this.overlay.classList.add("overlay--is-open"),this.mainNav.style.display="block")}}])&&e(n.prototype,i),Object.defineProperty(n,"prototype",{writable:!1}),t}()),document.addEventListener("DOMContentLoaded",(function(){document.querySelector(".preload-transitions").classList.remove("preload-transitions")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bkIsQ0FNbUIsb0JBQVZGLE9BQ0hBLE9BQVMsTUNOWDRQLEVBQTJCLEdBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJFLElBQWpCRCxFQUNILE9BQU9BLEVBQWFKLFFBR3JCLElBQUlELEVBQVNFLEVBQXlCRSxHQUFZLENBR2pESCxRQUFTLElBT1YsT0FIQU0sRUFBb0JILEdBQVVKLEVBQVFBLEVBQU9DLFFBQVNFLEdBRy9DSCxFQUFPQyxRLCtMQ2pCZixJQ0pNTyxXQUNKLGMsNEZBQWMsU0FDWnBILEtBQUtxSCxRQUFVaFEsU0FBU2lRLGNBQWMsWUFDdEN0SCxLQUFLdUgsUUFBVWxRLFNBQVNpUSxjQUFjLGFBQ3RDdEgsS0FBS3dILFNBQVduUSxTQUFTaVEsY0FBYyxzQkFDdkN0SCxLQUFLeUgsUywyQ0FHUCxXQUFTLFdBQ1B6SCxLQUFLd0gsU0FBU3BMLGlCQUFpQixTQUFTLGtCQUFNLEVBQUtzTCxxQiwyQkFHckQsV0FDRTFILEtBQUt3SCxTQUFTRyxVQUFVQyxPQUFPLDhCQUUxQjVILEtBQUtxSCxRQUFRTSxVQUFVRSxTQUFTLHFCQUtuQ3hRLFNBQVNtSyxLQUFLbkMsTUFBTXlJLFNBQVcsVUFDL0I5SCxLQUFLcUgsUUFBUU0sVUFBVUksT0FBTyxvQkFDOUIvSCxLQUFLdUgsUUFBUWxJLE1BQU0ySSxRQUFVLFNBTjdCM1EsU0FBU21LLEtBQUtuQyxNQUFNeUksU0FBVyxTQUMvQjlILEtBQUtxSCxRQUFRTSxVQUFVOUosSUFBSSxvQkFDM0JtQyxLQUFLdUgsUUFBUWxJLE1BQU0ySSxRQUFVLGMsc0VBbEI3QlosSURPTi9QLFNBQVMrRSxpQkFBaUIsb0JBQW1CLFdBQ2hDL0UsU0FBU2lRLGNBQWMsd0JBQzdCSyxVQUFVSSxPQUFPLDJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VicGFjay01LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvbGF6eXNpemVzL2xhenlzaXplcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLTUtc3RhcnRlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJwYWNrLTUtc3RhcnRlci8uL3NyYy9hc3NldHMvc2NyaXB0cy9NYWluLmpzIiwid2VicGFjazovL3dlYnBhY2stNS1zdGFydGVyLy4vc3JjL2Fzc2V0cy9zY3JpcHRzL21vZHVsZXMvTW9iaWxlTWVudS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24od2luZG93LCBmYWN0b3J5KSB7XG5cdHZhciBsYXp5U2l6ZXMgPSBmYWN0b3J5KHdpbmRvdywgd2luZG93LmRvY3VtZW50LCBEYXRlKTtcblx0d2luZG93LmxhenlTaXplcyA9IGxhenlTaXplcztcblx0aWYodHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cyl7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBsYXp5U2l6ZXM7XG5cdH1cbn0odHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/XG4gICAgICB3aW5kb3cgOiB7fSwgXG4vKipcbiAqIGltcG9ydChcIi4vdHlwZXMvZ2xvYmFsXCIpXG4gKiBAdHlwZWRlZiB7IGltcG9ydChcIi4vdHlwZXMvbGF6eXNpemVzLWNvbmZpZ1wiKS5MYXp5U2l6ZXNDb25maWdQYXJ0aWFsIH0gTGF6eVNpemVzQ29uZmlnUGFydGlhbFxuICovXG5mdW5jdGlvbiBsKHdpbmRvdywgZG9jdW1lbnQsIERhdGUpIHsgLy8gUGFzcyBpbiB0aGUgd2luZG93IERhdGUgZnVuY3Rpb24gYWxzbyBmb3IgU1NSIGJlY2F1c2UgdGhlIERhdGUgY2xhc3MgY2FuIGJlIGxvc3Rcblx0J3VzZSBzdHJpY3QnO1xuXHQvKmpzaGludCBlcW51bGw6dHJ1ZSAqL1xuXG5cdHZhciBsYXp5c2l6ZXMsXG5cdFx0LyoqXG5cdFx0ICogQHR5cGUgeyBMYXp5U2l6ZXNDb25maWdQYXJ0aWFsIH1cblx0XHQgKi9cblx0XHRsYXp5U2l6ZXNDZmc7XG5cblx0KGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHByb3A7XG5cblx0XHR2YXIgbGF6eVNpemVzRGVmYXVsdHMgPSB7XG5cdFx0XHRsYXp5Q2xhc3M6ICdsYXp5bG9hZCcsXG5cdFx0XHRsb2FkZWRDbGFzczogJ2xhenlsb2FkZWQnLFxuXHRcdFx0bG9hZGluZ0NsYXNzOiAnbGF6eWxvYWRpbmcnLFxuXHRcdFx0cHJlbG9hZENsYXNzOiAnbGF6eXByZWxvYWQnLFxuXHRcdFx0ZXJyb3JDbGFzczogJ2xhenllcnJvcicsXG5cdFx0XHQvL3N0cmljdENsYXNzOiAnbGF6eXN0cmljdCcsXG5cdFx0XHRhdXRvc2l6ZXNDbGFzczogJ2xhenlhdXRvc2l6ZXMnLFxuXHRcdFx0ZmFzdExvYWRlZENsYXNzOiAnbHMtaXMtY2FjaGVkJyxcblx0XHRcdGlmcmFtZUxvYWRNb2RlOiAwLFxuXHRcdFx0c3JjQXR0cjogJ2RhdGEtc3JjJyxcblx0XHRcdHNyY3NldEF0dHI6ICdkYXRhLXNyY3NldCcsXG5cdFx0XHRzaXplc0F0dHI6ICdkYXRhLXNpemVzJyxcblx0XHRcdC8vcHJlbG9hZEFmdGVyTG9hZDogZmFsc2UsXG5cdFx0XHRtaW5TaXplOiA0MCxcblx0XHRcdGN1c3RvbU1lZGlhOiB7fSxcblx0XHRcdGluaXQ6IHRydWUsXG5cdFx0XHRleHBGYWN0b3I6IDEuNSxcblx0XHRcdGhGYWM6IDAuOCxcblx0XHRcdGxvYWRNb2RlOiAyLFxuXHRcdFx0bG9hZEhpZGRlbjogdHJ1ZSxcblx0XHRcdHJpY1RpbWVvdXQ6IDAsXG5cdFx0XHR0aHJvdHRsZURlbGF5OiAxMjUsXG5cdFx0fTtcblxuXHRcdGxhenlTaXplc0NmZyA9IHdpbmRvdy5sYXp5U2l6ZXNDb25maWcgfHwgd2luZG93LmxhenlzaXplc0NvbmZpZyB8fCB7fTtcblxuXHRcdGZvcihwcm9wIGluIGxhenlTaXplc0RlZmF1bHRzKXtcblx0XHRcdGlmKCEocHJvcCBpbiBsYXp5U2l6ZXNDZmcpKXtcblx0XHRcdFx0bGF6eVNpemVzQ2ZnW3Byb3BdID0gbGF6eVNpemVzRGVmYXVsdHNbcHJvcF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9KSgpO1xuXG5cdGlmICghZG9jdW1lbnQgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0aW5pdDogZnVuY3Rpb24gKCkge30sXG5cdFx0XHQvKipcblx0XHRcdCAqIEB0eXBlIHsgTGF6eVNpemVzQ29uZmlnUGFydGlhbCB9XG5cdFx0XHQgKi9cblx0XHRcdGNmZzogbGF6eVNpemVzQ2ZnLFxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAdHlwZSB7IHRydWUgfVxuXHRcdFx0ICovXG5cdFx0XHRub1N1cHBvcnQ6IHRydWUsXG5cdFx0fTtcblx0fVxuXG5cdHZhciBkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cdHZhciBzdXBwb3J0UGljdHVyZSA9IHdpbmRvdy5IVE1MUGljdHVyZUVsZW1lbnQ7XG5cblx0dmFyIF9hZGRFdmVudExpc3RlbmVyID0gJ2FkZEV2ZW50TGlzdGVuZXInO1xuXG5cdHZhciBfZ2V0QXR0cmlidXRlID0gJ2dldEF0dHJpYnV0ZSc7XG5cblx0LyoqXG5cdCAqIFVwZGF0ZSB0byBiaW5kIHRvIHdpbmRvdyBiZWNhdXNlICd0aGlzJyBiZWNvbWVzIG51bGwgZHVyaW5nIFNTUlxuXHQgKiBidWlsZHMuXG5cdCAqL1xuXHR2YXIgYWRkRXZlbnRMaXN0ZW5lciA9IHdpbmRvd1tfYWRkRXZlbnRMaXN0ZW5lcl0uYmluZCh3aW5kb3cpO1xuXG5cdHZhciBzZXRUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQ7XG5cblx0dmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgc2V0VGltZW91dDtcblxuXHR2YXIgcmVxdWVzdElkbGVDYWxsYmFjayA9IHdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrO1xuXG5cdHZhciByZWdQaWN0dXJlID0gL15waWN0dXJlJC9pO1xuXG5cdHZhciBsb2FkRXZlbnRzID0gWydsb2FkJywgJ2Vycm9yJywgJ2xhenlpbmNsdWRlZCcsICdfbGF6eWxvYWRlZCddO1xuXG5cdHZhciByZWdDbGFzc0NhY2hlID0ge307XG5cblx0dmFyIGZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaDtcblxuXHQvKipcblx0ICogQHBhcmFtIGVsZSB7RWxlbWVudH1cblx0ICogQHBhcmFtIGNscyB7c3RyaW5nfVxuXHQgKi9cblx0dmFyIGhhc0NsYXNzID0gZnVuY3Rpb24oZWxlLCBjbHMpIHtcblx0XHRpZighcmVnQ2xhc3NDYWNoZVtjbHNdKXtcblx0XHRcdHJlZ0NsYXNzQ2FjaGVbY2xzXSA9IG5ldyBSZWdFeHAoJyhcXFxcc3xeKScrY2xzKycoXFxcXHN8JCknKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlZ0NsYXNzQ2FjaGVbY2xzXS50ZXN0KGVsZVtfZ2V0QXR0cmlidXRlXSgnY2xhc3MnKSB8fCAnJykgJiYgcmVnQ2xhc3NDYWNoZVtjbHNdO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAcGFyYW0gZWxlIHtFbGVtZW50fVxuXHQgKiBAcGFyYW0gY2xzIHtzdHJpbmd9XG5cdCAqL1xuXHR2YXIgYWRkQ2xhc3MgPSBmdW5jdGlvbihlbGUsIGNscykge1xuXHRcdGlmICghaGFzQ2xhc3MoZWxlLCBjbHMpKXtcblx0XHRcdGVsZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGVsZVtfZ2V0QXR0cmlidXRlXSgnY2xhc3MnKSB8fCAnJykudHJpbSgpICsgJyAnICsgY2xzKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIEBwYXJhbSBlbGUge0VsZW1lbnR9XG5cdCAqIEBwYXJhbSBjbHMge3N0cmluZ31cblx0ICovXG5cdHZhciByZW1vdmVDbGFzcyA9IGZ1bmN0aW9uKGVsZSwgY2xzKSB7XG5cdFx0dmFyIHJlZztcblx0XHRpZiAoKHJlZyA9IGhhc0NsYXNzKGVsZSxjbHMpKSkge1xuXHRcdFx0ZWxlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoZWxlW19nZXRBdHRyaWJ1dGVdKCdjbGFzcycpIHx8ICcnKS5yZXBsYWNlKHJlZywgJyAnKSk7XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBhZGRSZW1vdmVMb2FkRXZlbnRzID0gZnVuY3Rpb24oZG9tLCBmbiwgYWRkKXtcblx0XHR2YXIgYWN0aW9uID0gYWRkID8gX2FkZEV2ZW50TGlzdGVuZXIgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG5cdFx0aWYoYWRkKXtcblx0XHRcdGFkZFJlbW92ZUxvYWRFdmVudHMoZG9tLCBmbik7XG5cdFx0fVxuXHRcdGxvYWRFdmVudHMuZm9yRWFjaChmdW5jdGlvbihldnQpe1xuXHRcdFx0ZG9tW2FjdGlvbl0oZXZ0LCBmbik7XG5cdFx0fSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBwYXJhbSBlbGVtIHsgRWxlbWVudCB9XG5cdCAqIEBwYXJhbSBuYW1lIHsgc3RyaW5nIH1cblx0ICogQHBhcmFtIGRldGFpbCB7IGFueSB9XG5cdCAqIEBwYXJhbSBub0J1YmJsZXMgeyBib29sZWFuIH1cblx0ICogQHBhcmFtIG5vQ2FuY2VsYWJsZSB7IGJvb2xlYW4gfVxuXHQgKiBAcmV0dXJucyB7IEN1c3RvbUV2ZW50IH1cblx0ICovXG5cdHZhciB0cmlnZ2VyRXZlbnQgPSBmdW5jdGlvbihlbGVtLCBuYW1lLCBkZXRhaWwsIG5vQnViYmxlcywgbm9DYW5jZWxhYmxlKXtcblx0XHR2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcblxuXHRcdGlmKCFkZXRhaWwpe1xuXHRcdFx0ZGV0YWlsID0ge307XG5cdFx0fVxuXG5cdFx0ZGV0YWlsLmluc3RhbmNlID0gbGF6eXNpemVzO1xuXG5cdFx0ZXZlbnQuaW5pdEV2ZW50KG5hbWUsICFub0J1YmJsZXMsICFub0NhbmNlbGFibGUpO1xuXG5cdFx0ZXZlbnQuZGV0YWlsID0gZGV0YWlsO1xuXG5cdFx0ZWxlbS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcblx0XHRyZXR1cm4gZXZlbnQ7XG5cdH07XG5cblx0dmFyIHVwZGF0ZVBvbHlmaWxsID0gZnVuY3Rpb24gKGVsLCBmdWxsKXtcblx0XHR2YXIgcG9seWZpbGw7XG5cdFx0aWYoICFzdXBwb3J0UGljdHVyZSAmJiAoIHBvbHlmaWxsID0gKHdpbmRvdy5waWN0dXJlZmlsbCB8fCBsYXp5U2l6ZXNDZmcucGYpICkgKXtcblx0XHRcdGlmKGZ1bGwgJiYgZnVsbC5zcmMgJiYgIWVsW19nZXRBdHRyaWJ1dGVdKCdzcmNzZXQnKSl7XG5cdFx0XHRcdGVsLnNldEF0dHJpYnV0ZSgnc3Jjc2V0JywgZnVsbC5zcmMpO1xuXHRcdFx0fVxuXHRcdFx0cG9seWZpbGwoe3JlZXZhbHVhdGU6IHRydWUsIGVsZW1lbnRzOiBbZWxdfSk7XG5cdFx0fSBlbHNlIGlmKGZ1bGwgJiYgZnVsbC5zcmMpe1xuXHRcdFx0ZWwuc3JjID0gZnVsbC5zcmM7XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBnZXRDU1MgPSBmdW5jdGlvbiAoZWxlbSwgc3R5bGUpe1xuXHRcdHJldHVybiAoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtLCBudWxsKSB8fCB7fSlbc3R5bGVdO1xuXHR9O1xuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gZWxlbSB7IEVsZW1lbnQgfVxuXHQgKiBAcGFyYW0gcGFyZW50IHsgRWxlbWVudCB9XG5cdCAqIEBwYXJhbSBbd2lkdGhdIHtudW1iZXJ9XG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9XG5cdCAqL1xuXHR2YXIgZ2V0V2lkdGggPSBmdW5jdGlvbihlbGVtLCBwYXJlbnQsIHdpZHRoKXtcblx0XHR3aWR0aCA9IHdpZHRoIHx8IGVsZW0ub2Zmc2V0V2lkdGg7XG5cblx0XHR3aGlsZSh3aWR0aCA8IGxhenlTaXplc0NmZy5taW5TaXplICYmIHBhcmVudCAmJiAhZWxlbS5fbGF6eXNpemVzV2lkdGgpe1xuXHRcdFx0d2lkdGggPSAgcGFyZW50Lm9mZnNldFdpZHRoO1xuXHRcdFx0cGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHdpZHRoO1xuXHR9O1xuXG5cdHZhciByQUYgPSAoZnVuY3Rpb24oKXtcblx0XHR2YXIgcnVubmluZywgd2FpdGluZztcblx0XHR2YXIgZmlyc3RGbnMgPSBbXTtcblx0XHR2YXIgc2Vjb25kRm5zID0gW107XG5cdFx0dmFyIGZucyA9IGZpcnN0Rm5zO1xuXG5cdFx0dmFyIHJ1biA9IGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgcnVuRm5zID0gZm5zO1xuXG5cdFx0XHRmbnMgPSBmaXJzdEZucy5sZW5ndGggPyBzZWNvbmRGbnMgOiBmaXJzdEZucztcblxuXHRcdFx0cnVubmluZyA9IHRydWU7XG5cdFx0XHR3YWl0aW5nID0gZmFsc2U7XG5cblx0XHRcdHdoaWxlKHJ1bkZucy5sZW5ndGgpe1xuXHRcdFx0XHRydW5GbnMuc2hpZnQoKSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRydW5uaW5nID0gZmFsc2U7XG5cdFx0fTtcblxuXHRcdHZhciByYWZCYXRjaCA9IGZ1bmN0aW9uKGZuLCBxdWV1ZSl7XG5cdFx0XHRpZihydW5uaW5nICYmICFxdWV1ZSl7XG5cdFx0XHRcdGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmbnMucHVzaChmbik7XG5cblx0XHRcdFx0aWYoIXdhaXRpbmcpe1xuXHRcdFx0XHRcdHdhaXRpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdChkb2N1bWVudC5oaWRkZW4gPyBzZXRUaW1lb3V0IDogcmVxdWVzdEFuaW1hdGlvbkZyYW1lKShydW4pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHJhZkJhdGNoLl9sc0ZsdXNoID0gcnVuO1xuXG5cdFx0cmV0dXJuIHJhZkJhdGNoO1xuXHR9KSgpO1xuXG5cdHZhciByQUZJdCA9IGZ1bmN0aW9uKGZuLCBzaW1wbGUpe1xuXHRcdHJldHVybiBzaW1wbGUgP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJBRihmbik7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHZhciB0aGF0ID0gdGhpcztcblx0XHRcdFx0dmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cdFx0XHRcdHJBRihmdW5jdGlvbigpe1xuXHRcdFx0XHRcdGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHQ7XG5cdH07XG5cblx0dmFyIHRocm90dGxlID0gZnVuY3Rpb24oZm4pe1xuXHRcdHZhciBydW5uaW5nO1xuXHRcdHZhciBsYXN0VGltZSA9IDA7XG5cdFx0dmFyIGdEZWxheSA9IGxhenlTaXplc0NmZy50aHJvdHRsZURlbGF5O1xuXHRcdHZhciBySUNUaW1lb3V0ID0gbGF6eVNpemVzQ2ZnLnJpY1RpbWVvdXQ7XG5cdFx0dmFyIHJ1biA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRydW5uaW5nID0gZmFsc2U7XG5cdFx0XHRsYXN0VGltZSA9IERhdGUubm93KCk7XG5cdFx0XHRmbigpO1xuXHRcdH07XG5cdFx0dmFyIGlkbGVDYWxsYmFjayA9IHJlcXVlc3RJZGxlQ2FsbGJhY2sgJiYgcklDVGltZW91dCA+IDQ5ID9cblx0XHRcdGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHJlcXVlc3RJZGxlQ2FsbGJhY2socnVuLCB7dGltZW91dDogcklDVGltZW91dH0pO1xuXG5cdFx0XHRcdGlmKHJJQ1RpbWVvdXQgIT09IGxhenlTaXplc0NmZy5yaWNUaW1lb3V0KXtcblx0XHRcdFx0XHRySUNUaW1lb3V0ID0gbGF6eVNpemVzQ2ZnLnJpY1RpbWVvdXQ7XG5cdFx0XHRcdH1cblx0XHRcdH0gOlxuXHRcdFx0ckFGSXQoZnVuY3Rpb24oKXtcblx0XHRcdFx0c2V0VGltZW91dChydW4pO1xuXHRcdFx0fSwgdHJ1ZSlcblx0XHQ7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24oaXNQcmlvcml0eSl7XG5cdFx0XHR2YXIgZGVsYXk7XG5cblx0XHRcdGlmKChpc1ByaW9yaXR5ID0gaXNQcmlvcml0eSA9PT0gdHJ1ZSkpe1xuXHRcdFx0XHRySUNUaW1lb3V0ID0gMzM7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHJ1bm5pbmcpe1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHJ1bm5pbmcgPSAgdHJ1ZTtcblxuXHRcdFx0ZGVsYXkgPSBnRGVsYXkgLSAoRGF0ZS5ub3coKSAtIGxhc3RUaW1lKTtcblxuXHRcdFx0aWYoZGVsYXkgPCAwKXtcblx0XHRcdFx0ZGVsYXkgPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihpc1ByaW9yaXR5IHx8IGRlbGF5IDwgOSl7XG5cdFx0XHRcdGlkbGVDYWxsYmFjaygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2V0VGltZW91dChpZGxlQ2FsbGJhY2ssIGRlbGF5KTtcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXG5cdC8vYmFzZWQgb24gaHR0cDovL21vZGVybmphdmFzY3JpcHQuYmxvZ3Nwb3QuZGUvMjAxMy8wOC9idWlsZGluZy1iZXR0ZXItZGVib3VuY2UuaHRtbFxuXHR2YXIgZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jKSB7XG5cdFx0dmFyIHRpbWVvdXQsIHRpbWVzdGFtcDtcblx0XHR2YXIgd2FpdCA9IDk5O1xuXHRcdHZhciBydW4gPSBmdW5jdGlvbigpe1xuXHRcdFx0dGltZW91dCA9IG51bGw7XG5cdFx0XHRmdW5jKCk7XG5cdFx0fTtcblx0XHR2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBsYXN0ID0gRGF0ZS5ub3coKSAtIHRpbWVzdGFtcDtcblxuXHRcdFx0aWYgKGxhc3QgPCB3YWl0KSB7XG5cdFx0XHRcdHNldFRpbWVvdXQobGF0ZXIsIHdhaXQgLSBsYXN0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdChyZXF1ZXN0SWRsZUNhbGxiYWNrIHx8IHJ1bikocnVuKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0dGltZXN0YW1wID0gRGF0ZS5ub3coKTtcblxuXHRcdFx0aWYgKCF0aW1lb3V0KSB7XG5cdFx0XHRcdHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXG5cdHZhciBsb2FkZXIgPSAoZnVuY3Rpb24oKXtcblx0XHR2YXIgcHJlbG9hZEVsZW1zLCBpc0NvbXBsZXRlZCwgcmVzZXRQcmVsb2FkaW5nVGltZXIsIGxvYWRNb2RlLCBzdGFydGVkO1xuXG5cdFx0dmFyIGVMdlcsIGVsdkgsIGVMdG9wLCBlTGxlZnQsIGVMcmlnaHQsIGVMYm90dG9tLCBpc0JvZHlIaWRkZW47XG5cblx0XHR2YXIgcmVnSW1nID0gL15pbWckL2k7XG5cdFx0dmFyIHJlZ0lmcmFtZSA9IC9eaWZyYW1lJC9pO1xuXG5cdFx0dmFyIHN1cHBvcnRTY3JvbGwgPSAoJ29uc2Nyb2xsJyBpbiB3aW5kb3cpICYmICEoLyhnbGV8aW5nKWJvdC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSk7XG5cblx0XHR2YXIgc2hyaW5rRXhwYW5kID0gMDtcblx0XHR2YXIgY3VycmVudEV4cGFuZCA9IDA7XG5cblx0XHR2YXIgaXNMb2FkaW5nID0gMDtcblx0XHR2YXIgbG93UnVucyA9IC0xO1xuXG5cdFx0dmFyIHJlc2V0UHJlbG9hZGluZyA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0aXNMb2FkaW5nLS07XG5cdFx0XHRpZighZSB8fCBpc0xvYWRpbmcgPCAwIHx8ICFlLnRhcmdldCl7XG5cdFx0XHRcdGlzTG9hZGluZyA9IDA7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBpc1Zpc2libGUgPSBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0aWYgKGlzQm9keUhpZGRlbiA9PSBudWxsKSB7XG5cdFx0XHRcdGlzQm9keUhpZGRlbiA9IGdldENTUyhkb2N1bWVudC5ib2R5LCAndmlzaWJpbGl0eScpID09ICdoaWRkZW4nO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gaXNCb2R5SGlkZGVuIHx8ICEoZ2V0Q1NTKGVsZW0ucGFyZW50Tm9kZSwgJ3Zpc2liaWxpdHknKSA9PSAnaGlkZGVuJyAmJiBnZXRDU1MoZWxlbSwgJ3Zpc2liaWxpdHknKSA9PSAnaGlkZGVuJyk7XG5cdFx0fTtcblxuXHRcdHZhciBpc05lc3RlZFZpc2libGUgPSBmdW5jdGlvbihlbGVtLCBlbGVtRXhwYW5kKXtcblx0XHRcdHZhciBvdXRlclJlY3Q7XG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbTtcblx0XHRcdHZhciB2aXNpYmxlID0gaXNWaXNpYmxlKGVsZW0pO1xuXG5cdFx0XHRlTHRvcCAtPSBlbGVtRXhwYW5kO1xuXHRcdFx0ZUxib3R0b20gKz0gZWxlbUV4cGFuZDtcblx0XHRcdGVMbGVmdCAtPSBlbGVtRXhwYW5kO1xuXHRcdFx0ZUxyaWdodCArPSBlbGVtRXhwYW5kO1xuXG5cdFx0XHR3aGlsZSh2aXNpYmxlICYmIChwYXJlbnQgPSBwYXJlbnQub2Zmc2V0UGFyZW50KSAmJiBwYXJlbnQgIT0gZG9jdW1lbnQuYm9keSAmJiBwYXJlbnQgIT0gZG9jRWxlbSl7XG5cdFx0XHRcdHZpc2libGUgPSAoKGdldENTUyhwYXJlbnQsICdvcGFjaXR5JykgfHwgMSkgPiAwKTtcblxuXHRcdFx0XHRpZih2aXNpYmxlICYmIGdldENTUyhwYXJlbnQsICdvdmVyZmxvdycpICE9ICd2aXNpYmxlJyl7XG5cdFx0XHRcdFx0b3V0ZXJSZWN0ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0XHRcdHZpc2libGUgPSBlTHJpZ2h0ID4gb3V0ZXJSZWN0LmxlZnQgJiZcblx0XHRcdFx0XHRcdGVMbGVmdCA8IG91dGVyUmVjdC5yaWdodCAmJlxuXHRcdFx0XHRcdFx0ZUxib3R0b20gPiBvdXRlclJlY3QudG9wIC0gMSAmJlxuXHRcdFx0XHRcdFx0ZUx0b3AgPCBvdXRlclJlY3QuYm90dG9tICsgMVxuXHRcdFx0XHRcdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmlzaWJsZTtcblx0XHR9O1xuXG5cdFx0dmFyIGNoZWNrRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBlTGxlbiwgaSwgcmVjdCwgYXV0b0xvYWRFbGVtLCBsb2FkZWRTb21ldGhpbmcsIGVsZW1FeHBhbmQsIGVsZW1OZWdhdGl2ZUV4cGFuZCwgZWxlbUV4cGFuZFZhbCxcblx0XHRcdFx0YmVmb3JlRXhwYW5kVmFsLCBkZWZhdWx0RXhwYW5kLCBwcmVsb2FkRXhwYW5kLCBoRmFjO1xuXHRcdFx0dmFyIGxhenlsb2FkRWxlbXMgPSBsYXp5c2l6ZXMuZWxlbWVudHM7XG5cblx0XHRcdGlmKChsb2FkTW9kZSA9IGxhenlTaXplc0NmZy5sb2FkTW9kZSkgJiYgaXNMb2FkaW5nIDwgOCAmJiAoZUxsZW4gPSBsYXp5bG9hZEVsZW1zLmxlbmd0aCkpe1xuXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRcdGxvd1J1bnMrKztcblxuXHRcdFx0XHRmb3IoOyBpIDwgZUxsZW47IGkrKyl7XG5cblx0XHRcdFx0XHRpZighbGF6eWxvYWRFbGVtc1tpXSB8fCBsYXp5bG9hZEVsZW1zW2ldLl9sYXp5UmFjZSl7Y29udGludWU7fVxuXG5cdFx0XHRcdFx0aWYoIXN1cHBvcnRTY3JvbGwgfHwgKGxhenlzaXplcy5wcmVtYXR1cmVVbnZlaWwgJiYgbGF6eXNpemVzLnByZW1hdHVyZVVudmVpbChsYXp5bG9hZEVsZW1zW2ldKSkpe3VudmVpbEVsZW1lbnQobGF6eWxvYWRFbGVtc1tpXSk7Y29udGludWU7fVxuXG5cdFx0XHRcdFx0aWYoIShlbGVtRXhwYW5kVmFsID0gbGF6eWxvYWRFbGVtc1tpXVtfZ2V0QXR0cmlidXRlXSgnZGF0YS1leHBhbmQnKSkgfHwgIShlbGVtRXhwYW5kID0gZWxlbUV4cGFuZFZhbCAqIDEpKXtcblx0XHRcdFx0XHRcdGVsZW1FeHBhbmQgPSBjdXJyZW50RXhwYW5kO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICghZGVmYXVsdEV4cGFuZCkge1xuXHRcdFx0XHRcdFx0ZGVmYXVsdEV4cGFuZCA9ICghbGF6eVNpemVzQ2ZnLmV4cGFuZCB8fCBsYXp5U2l6ZXNDZmcuZXhwYW5kIDwgMSkgP1xuXHRcdFx0XHRcdFx0XHRkb2NFbGVtLmNsaWVudEhlaWdodCA+IDUwMCAmJiBkb2NFbGVtLmNsaWVudFdpZHRoID4gNTAwID8gNTAwIDogMzcwIDpcblx0XHRcdFx0XHRcdFx0bGF6eVNpemVzQ2ZnLmV4cGFuZDtcblxuXHRcdFx0XHRcdFx0bGF6eXNpemVzLl9kZWZFeCA9IGRlZmF1bHRFeHBhbmQ7XG5cblx0XHRcdFx0XHRcdHByZWxvYWRFeHBhbmQgPSBkZWZhdWx0RXhwYW5kICogbGF6eVNpemVzQ2ZnLmV4cEZhY3Rvcjtcblx0XHRcdFx0XHRcdGhGYWMgPSBsYXp5U2l6ZXNDZmcuaEZhYztcblx0XHRcdFx0XHRcdGlzQm9keUhpZGRlbiA9IG51bGw7XG5cblx0XHRcdFx0XHRcdGlmKGN1cnJlbnRFeHBhbmQgPCBwcmVsb2FkRXhwYW5kICYmIGlzTG9hZGluZyA8IDEgJiYgbG93UnVucyA+IDIgJiYgbG9hZE1vZGUgPiAyICYmICFkb2N1bWVudC5oaWRkZW4pe1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50RXhwYW5kID0gcHJlbG9hZEV4cGFuZDtcblx0XHRcdFx0XHRcdFx0bG93UnVucyA9IDA7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYobG9hZE1vZGUgPiAxICYmIGxvd1J1bnMgPiAxICYmIGlzTG9hZGluZyA8IDYpe1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50RXhwYW5kID0gZGVmYXVsdEV4cGFuZDtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRFeHBhbmQgPSBzaHJpbmtFeHBhbmQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYoYmVmb3JlRXhwYW5kVmFsICE9PSBlbGVtRXhwYW5kKXtcblx0XHRcdFx0XHRcdGVMdlcgPSBpbm5lcldpZHRoICsgKGVsZW1FeHBhbmQgKiBoRmFjKTtcblx0XHRcdFx0XHRcdGVsdkggPSBpbm5lckhlaWdodCArIGVsZW1FeHBhbmQ7XG5cdFx0XHRcdFx0XHRlbGVtTmVnYXRpdmVFeHBhbmQgPSBlbGVtRXhwYW5kICogLTE7XG5cdFx0XHRcdFx0XHRiZWZvcmVFeHBhbmRWYWwgPSBlbGVtRXhwYW5kO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJlY3QgPSBsYXp5bG9hZEVsZW1zW2ldLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0XHRcdFx0aWYgKChlTGJvdHRvbSA9IHJlY3QuYm90dG9tKSA+PSBlbGVtTmVnYXRpdmVFeHBhbmQgJiZcblx0XHRcdFx0XHRcdChlTHRvcCA9IHJlY3QudG9wKSA8PSBlbHZIICYmXG5cdFx0XHRcdFx0XHQoZUxyaWdodCA9IHJlY3QucmlnaHQpID49IGVsZW1OZWdhdGl2ZUV4cGFuZCAqIGhGYWMgJiZcblx0XHRcdFx0XHRcdChlTGxlZnQgPSByZWN0LmxlZnQpIDw9IGVMdlcgJiZcblx0XHRcdFx0XHRcdChlTGJvdHRvbSB8fCBlTHJpZ2h0IHx8IGVMbGVmdCB8fCBlTHRvcCkgJiZcblx0XHRcdFx0XHRcdChsYXp5U2l6ZXNDZmcubG9hZEhpZGRlbiB8fCBpc1Zpc2libGUobGF6eWxvYWRFbGVtc1tpXSkpICYmXG5cdFx0XHRcdFx0XHQoKGlzQ29tcGxldGVkICYmIGlzTG9hZGluZyA8IDMgJiYgIWVsZW1FeHBhbmRWYWwgJiYgKGxvYWRNb2RlIDwgMyB8fCBsb3dSdW5zIDwgNCkpIHx8IGlzTmVzdGVkVmlzaWJsZShsYXp5bG9hZEVsZW1zW2ldLCBlbGVtRXhwYW5kKSkpe1xuXHRcdFx0XHRcdFx0dW52ZWlsRWxlbWVudChsYXp5bG9hZEVsZW1zW2ldKTtcblx0XHRcdFx0XHRcdGxvYWRlZFNvbWV0aGluZyA9IHRydWU7XG5cdFx0XHRcdFx0XHRpZihpc0xvYWRpbmcgPiA5KXticmVhazt9XG5cdFx0XHRcdFx0fSBlbHNlIGlmKCFsb2FkZWRTb21ldGhpbmcgJiYgaXNDb21wbGV0ZWQgJiYgIWF1dG9Mb2FkRWxlbSAmJlxuXHRcdFx0XHRcdFx0aXNMb2FkaW5nIDwgNCAmJiBsb3dSdW5zIDwgNCAmJiBsb2FkTW9kZSA+IDIgJiZcblx0XHRcdFx0XHRcdChwcmVsb2FkRWxlbXNbMF0gfHwgbGF6eVNpemVzQ2ZnLnByZWxvYWRBZnRlckxvYWQpICYmXG5cdFx0XHRcdFx0XHQocHJlbG9hZEVsZW1zWzBdIHx8ICghZWxlbUV4cGFuZFZhbCAmJiAoKGVMYm90dG9tIHx8IGVMcmlnaHQgfHwgZUxsZWZ0IHx8IGVMdG9wKSB8fCBsYXp5bG9hZEVsZW1zW2ldW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NmZy5zaXplc0F0dHIpICE9ICdhdXRvJykpKSl7XG5cdFx0XHRcdFx0XHRhdXRvTG9hZEVsZW0gPSBwcmVsb2FkRWxlbXNbMF0gfHwgbGF6eWxvYWRFbGVtc1tpXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihhdXRvTG9hZEVsZW0gJiYgIWxvYWRlZFNvbWV0aGluZyl7XG5cdFx0XHRcdFx0dW52ZWlsRWxlbWVudChhdXRvTG9hZEVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciB0aHJvdHRsZWRDaGVja0VsZW1lbnRzID0gdGhyb3R0bGUoY2hlY2tFbGVtZW50cyk7XG5cblx0XHR2YXIgc3dpdGNoTG9hZGluZ0NsYXNzID0gZnVuY3Rpb24oZSl7XG5cdFx0XHR2YXIgZWxlbSA9IGUudGFyZ2V0O1xuXG5cdFx0XHRpZiAoZWxlbS5fbGF6eUNhY2hlKSB7XG5cdFx0XHRcdGRlbGV0ZSBlbGVtLl9sYXp5Q2FjaGU7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0cmVzZXRQcmVsb2FkaW5nKGUpO1xuXHRcdFx0YWRkQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmxvYWRlZENsYXNzKTtcblx0XHRcdHJlbW92ZUNsYXNzKGVsZW0sIGxhenlTaXplc0NmZy5sb2FkaW5nQ2xhc3MpO1xuXHRcdFx0YWRkUmVtb3ZlTG9hZEV2ZW50cyhlbGVtLCByYWZTd2l0Y2hMb2FkaW5nQ2xhc3MpO1xuXHRcdFx0dHJpZ2dlckV2ZW50KGVsZW0sICdsYXp5bG9hZGVkJyk7XG5cdFx0fTtcblx0XHR2YXIgcmFmZWRTd2l0Y2hMb2FkaW5nQ2xhc3MgPSByQUZJdChzd2l0Y2hMb2FkaW5nQ2xhc3MpO1xuXHRcdHZhciByYWZTd2l0Y2hMb2FkaW5nQ2xhc3MgPSBmdW5jdGlvbihlKXtcblx0XHRcdHJhZmVkU3dpdGNoTG9hZGluZ0NsYXNzKHt0YXJnZXQ6IGUudGFyZ2V0fSk7XG5cdFx0fTtcblxuXHRcdHZhciBjaGFuZ2VJZnJhbWVTcmMgPSBmdW5jdGlvbihlbGVtLCBzcmMpe1xuXHRcdFx0dmFyIGxvYWRNb2RlID0gZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbG9hZC1tb2RlJykgfHwgbGF6eVNpemVzQ2ZnLmlmcmFtZUxvYWRNb2RlO1xuXG5cdFx0XHQvLyBsb2FkTW9kZSBjYW4gYmUgYWxzbyBhIHN0cmluZyFcblx0XHRcdGlmIChsb2FkTW9kZSA9PSAwKSB7XG5cdFx0XHRcdGVsZW0uY29udGVudFdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHNyYyk7XG5cdFx0XHR9IGVsc2UgaWYgKGxvYWRNb2RlID09IDEpIHtcblx0XHRcdFx0ZWxlbS5zcmMgPSBzcmM7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBoYW5kbGVTb3VyY2VzID0gZnVuY3Rpb24oc291cmNlKXtcblx0XHRcdHZhciBjdXN0b21NZWRpYTtcblxuXHRcdFx0dmFyIHNvdXJjZVNyY3NldCA9IHNvdXJjZVtfZ2V0QXR0cmlidXRlXShsYXp5U2l6ZXNDZmcuc3Jjc2V0QXR0cik7XG5cblx0XHRcdGlmKCAoY3VzdG9tTWVkaWEgPSBsYXp5U2l6ZXNDZmcuY3VzdG9tTWVkaWFbc291cmNlW19nZXRBdHRyaWJ1dGVdKCdkYXRhLW1lZGlhJykgfHwgc291cmNlW19nZXRBdHRyaWJ1dGVdKCdtZWRpYScpXSkgKXtcblx0XHRcdFx0c291cmNlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBjdXN0b21NZWRpYSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHNvdXJjZVNyY3NldCl7XG5cdFx0XHRcdHNvdXJjZS5zZXRBdHRyaWJ1dGUoJ3NyY3NldCcsIHNvdXJjZVNyY3NldCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBsYXp5VW52ZWlsID0gckFGSXQoZnVuY3Rpb24gKGVsZW0sIGRldGFpbCwgaXNBdXRvLCBzaXplcywgaXNJbWcpe1xuXHRcdFx0dmFyIHNyYywgc3Jjc2V0LCBwYXJlbnQsIGlzUGljdHVyZSwgZXZlbnQsIGZpcmVzTG9hZDtcblxuXHRcdFx0aWYoIShldmVudCA9IHRyaWdnZXJFdmVudChlbGVtLCAnbGF6eWJlZm9yZXVudmVpbCcsIGRldGFpbCkpLmRlZmF1bHRQcmV2ZW50ZWQpe1xuXG5cdFx0XHRcdGlmKHNpemVzKXtcblx0XHRcdFx0XHRpZihpc0F1dG8pe1xuXHRcdFx0XHRcdFx0YWRkQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmF1dG9zaXplc0NsYXNzKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoJ3NpemVzJywgc2l6ZXMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNyY3NldCA9IGVsZW1bX2dldEF0dHJpYnV0ZV0obGF6eVNpemVzQ2ZnLnNyY3NldEF0dHIpO1xuXHRcdFx0XHRzcmMgPSBlbGVtW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NmZy5zcmNBdHRyKTtcblxuXHRcdFx0XHRpZihpc0ltZykge1xuXHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0XHRpc1BpY3R1cmUgPSBwYXJlbnQgJiYgcmVnUGljdHVyZS50ZXN0KHBhcmVudC5ub2RlTmFtZSB8fCAnJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmaXJlc0xvYWQgPSBkZXRhaWwuZmlyZXNMb2FkIHx8ICgoJ3NyYycgaW4gZWxlbSkgJiYgKHNyY3NldCB8fCBzcmMgfHwgaXNQaWN0dXJlKSk7XG5cblx0XHRcdFx0ZXZlbnQgPSB7dGFyZ2V0OiBlbGVtfTtcblxuXHRcdFx0XHRhZGRDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcubG9hZGluZ0NsYXNzKTtcblxuXHRcdFx0XHRpZihmaXJlc0xvYWQpe1xuXHRcdFx0XHRcdGNsZWFyVGltZW91dChyZXNldFByZWxvYWRpbmdUaW1lcik7XG5cdFx0XHRcdFx0cmVzZXRQcmVsb2FkaW5nVGltZXIgPSBzZXRUaW1lb3V0KHJlc2V0UHJlbG9hZGluZywgMjUwMCk7XG5cdFx0XHRcdFx0YWRkUmVtb3ZlTG9hZEV2ZW50cyhlbGVtLCByYWZTd2l0Y2hMb2FkaW5nQ2xhc3MsIHRydWUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoaXNQaWN0dXJlKXtcblx0XHRcdFx0XHRmb3JFYWNoLmNhbGwocGFyZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzb3VyY2UnKSwgaGFuZGxlU291cmNlcyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihzcmNzZXQpe1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCdzcmNzZXQnLCBzcmNzZXQpO1xuXHRcdFx0XHR9IGVsc2UgaWYoc3JjICYmICFpc1BpY3R1cmUpe1xuXHRcdFx0XHRcdGlmKHJlZ0lmcmFtZS50ZXN0KGVsZW0ubm9kZU5hbWUpKXtcblx0XHRcdFx0XHRcdGNoYW5nZUlmcmFtZVNyYyhlbGVtLCBzcmMpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNyYyA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihpc0ltZyAmJiAoc3Jjc2V0IHx8IGlzUGljdHVyZSkpe1xuXHRcdFx0XHRcdHVwZGF0ZVBvbHlmaWxsKGVsZW0sIHtzcmM6IHNyY30pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKGVsZW0uX2xhenlSYWNlKXtcblx0XHRcdFx0ZGVsZXRlIGVsZW0uX2xhenlSYWNlO1xuXHRcdFx0fVxuXHRcdFx0cmVtb3ZlQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmxhenlDbGFzcyk7XG5cblx0XHRcdHJBRihmdW5jdGlvbigpe1xuXHRcdFx0XHQvLyBQYXJ0IG9mIHRoaXMgY2FuIGJlIHJlbW92ZWQgYXMgc29vbiBhcyB0aGlzIGZpeCBpcyBvbGRlcjogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NzczMSAoMjAxNSlcblx0XHRcdFx0dmFyIGlzTG9hZGVkID0gZWxlbS5jb21wbGV0ZSAmJiBlbGVtLm5hdHVyYWxXaWR0aCA+IDE7XG5cblx0XHRcdFx0aWYoICFmaXJlc0xvYWQgfHwgaXNMb2FkZWQpe1xuXHRcdFx0XHRcdGlmIChpc0xvYWRlZCkge1xuXHRcdFx0XHRcdFx0YWRkQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmZhc3RMb2FkZWRDbGFzcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHN3aXRjaExvYWRpbmdDbGFzcyhldmVudCk7XG5cdFx0XHRcdFx0ZWxlbS5fbGF6eUNhY2hlID0gdHJ1ZTtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRpZiAoJ19sYXp5Q2FjaGUnIGluIGVsZW0pIHtcblx0XHRcdFx0XHRcdFx0ZGVsZXRlIGVsZW0uX2xhenlDYWNoZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCA5KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZWxlbS5sb2FkaW5nID09ICdsYXp5Jykge1xuXHRcdFx0XHRcdGlzTG9hZGluZy0tO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0cnVlKTtcblx0XHR9KTtcblxuXHRcdC8qKlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIGVsZW0geyBFbGVtZW50IH1cblx0XHQgKi9cblx0XHR2YXIgdW52ZWlsRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtKXtcblx0XHRcdGlmIChlbGVtLl9sYXp5UmFjZSkge3JldHVybjt9XG5cdFx0XHR2YXIgZGV0YWlsO1xuXG5cdFx0XHR2YXIgaXNJbWcgPSByZWdJbWcudGVzdChlbGVtLm5vZGVOYW1lKTtcblxuXHRcdFx0Ly9hbGxvdyB1c2luZyBzaXplcz1cImF1dG9cIiwgYnV0IGRvbid0IHVzZS4gaXQncyBpbnZhbGlkLiBVc2UgZGF0YS1zaXplcz1cImF1dG9cIiBvciBhIHZhbGlkIHZhbHVlIGZvciBzaXplcyBpbnN0ZWFkIChpLmUuOiBzaXplcz1cIjgwdndcIilcblx0XHRcdHZhciBzaXplcyA9IGlzSW1nICYmIChlbGVtW19nZXRBdHRyaWJ1dGVdKGxhenlTaXplc0NmZy5zaXplc0F0dHIpIHx8IGVsZW1bX2dldEF0dHJpYnV0ZV0oJ3NpemVzJykpO1xuXHRcdFx0dmFyIGlzQXV0byA9IHNpemVzID09ICdhdXRvJztcblxuXHRcdFx0aWYoIChpc0F1dG8gfHwgIWlzQ29tcGxldGVkKSAmJiBpc0ltZyAmJiAoZWxlbVtfZ2V0QXR0cmlidXRlXSgnc3JjJykgfHwgZWxlbS5zcmNzZXQpICYmICFlbGVtLmNvbXBsZXRlICYmICFoYXNDbGFzcyhlbGVtLCBsYXp5U2l6ZXNDZmcuZXJyb3JDbGFzcykgJiYgaGFzQ2xhc3MoZWxlbSwgbGF6eVNpemVzQ2ZnLmxhenlDbGFzcykpe3JldHVybjt9XG5cblx0XHRcdGRldGFpbCA9IHRyaWdnZXJFdmVudChlbGVtLCAnbGF6eXVudmVpbHJlYWQnKS5kZXRhaWw7XG5cblx0XHRcdGlmKGlzQXV0byl7XG5cdFx0XHRcdCBhdXRvU2l6ZXIudXBkYXRlRWxlbShlbGVtLCB0cnVlLCBlbGVtLm9mZnNldFdpZHRoKTtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5fbGF6eVJhY2UgPSB0cnVlO1xuXHRcdFx0aXNMb2FkaW5nKys7XG5cblx0XHRcdGxhenlVbnZlaWwoZWxlbSwgZGV0YWlsLCBpc0F1dG8sIHNpemVzLCBpc0ltZyk7XG5cdFx0fTtcblxuXHRcdHZhciBhZnRlclNjcm9sbCA9IGRlYm91bmNlKGZ1bmN0aW9uKCl7XG5cdFx0XHRsYXp5U2l6ZXNDZmcubG9hZE1vZGUgPSAzO1xuXHRcdFx0dGhyb3R0bGVkQ2hlY2tFbGVtZW50cygpO1xuXHRcdH0pO1xuXG5cdFx0dmFyIGFsdExvYWRtb2RlU2Nyb2xsTGlzdG5lciA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRpZihsYXp5U2l6ZXNDZmcubG9hZE1vZGUgPT0gMyl7XG5cdFx0XHRcdGxhenlTaXplc0NmZy5sb2FkTW9kZSA9IDI7XG5cdFx0XHR9XG5cdFx0XHRhZnRlclNjcm9sbCgpO1xuXHRcdH07XG5cblx0XHR2YXIgb25sb2FkID0gZnVuY3Rpb24oKXtcblx0XHRcdGlmKGlzQ29tcGxldGVkKXtyZXR1cm47fVxuXHRcdFx0aWYoRGF0ZS5ub3coKSAtIHN0YXJ0ZWQgPCA5OTkpe1xuXHRcdFx0XHRzZXRUaW1lb3V0KG9ubG9hZCwgOTk5KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cblx0XHRcdGlzQ29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0bGF6eVNpemVzQ2ZnLmxvYWRNb2RlID0gMztcblxuXHRcdFx0dGhyb3R0bGVkQ2hlY2tFbGVtZW50cygpO1xuXG5cdFx0XHRhZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBhbHRMb2FkbW9kZVNjcm9sbExpc3RuZXIsIHRydWUpO1xuXHRcdH07XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0XzogZnVuY3Rpb24oKXtcblx0XHRcdFx0c3RhcnRlZCA9IERhdGUubm93KCk7XG5cblx0XHRcdFx0bGF6eXNpemVzLmVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShsYXp5U2l6ZXNDZmcubGF6eUNsYXNzKTtcblx0XHRcdFx0cHJlbG9hZEVsZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShsYXp5U2l6ZXNDZmcubGF6eUNsYXNzICsgJyAnICsgbGF6eVNpemVzQ2ZnLnByZWxvYWRDbGFzcyk7XG5cblx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cblx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cywgdHJ1ZSk7XG5cblx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcigncGFnZXNob3cnLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRcdGlmIChlLnBlcnNpc3RlZCkge1xuXHRcdFx0XHRcdFx0dmFyIGxvYWRpbmdFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgbGF6eVNpemVzQ2ZnLmxvYWRpbmdDbGFzcyk7XG5cblx0XHRcdFx0XHRcdGlmIChsb2FkaW5nRWxlbWVudHMubGVuZ3RoICYmIGxvYWRpbmdFbGVtZW50cy5mb3JFYWNoKSB7XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdFx0bG9hZGluZ0VsZW1lbnRzLmZvckVhY2goIGZ1bmN0aW9uIChpbWcpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChpbWcuY29tcGxldGUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dW52ZWlsRWxlbWVudChpbWcpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyKXtcblx0XHRcdFx0XHRuZXcgTXV0YXRpb25PYnNlcnZlciggdGhyb3R0bGVkQ2hlY2tFbGVtZW50cyApLm9ic2VydmUoIGRvY0VsZW0sIHtjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUsIGF0dHJpYnV0ZXM6IHRydWV9ICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZG9jRWxlbVtfYWRkRXZlbnRMaXN0ZW5lcl0oJ0RPTU5vZGVJbnNlcnRlZCcsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXHRcdFx0XHRcdGRvY0VsZW1bX2FkZEV2ZW50TGlzdGVuZXJdKCdET01BdHRyTW9kaWZpZWQnLCB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCB0cnVlKTtcblx0XHRcdFx0XHRzZXRJbnRlcnZhbCh0aHJvdHRsZWRDaGVja0VsZW1lbnRzLCA5OTkpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXG5cdFx0XHRcdC8vLCAnZnVsbHNjcmVlbmNoYW5nZSdcblx0XHRcdFx0Wydmb2N1cycsICdtb3VzZW92ZXInLCAnY2xpY2snLCAnbG9hZCcsICd0cmFuc2l0aW9uZW5kJywgJ2FuaW1hdGlvbmVuZCddLmZvckVhY2goZnVuY3Rpb24obmFtZSl7XG5cdFx0XHRcdFx0ZG9jdW1lbnRbX2FkZEV2ZW50TGlzdGVuZXJdKG5hbWUsIHRocm90dGxlZENoZWNrRWxlbWVudHMsIHRydWUpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRpZigoL2QkfF5jLy50ZXN0KGRvY3VtZW50LnJlYWR5U3RhdGUpKSl7XG5cdFx0XHRcdFx0b25sb2FkKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9ubG9hZCk7XG5cdFx0XHRcdFx0ZG9jdW1lbnRbX2FkZEV2ZW50TGlzdGVuZXJdKCdET01Db250ZW50TG9hZGVkJywgdGhyb3R0bGVkQ2hlY2tFbGVtZW50cyk7XG5cdFx0XHRcdFx0c2V0VGltZW91dChvbmxvYWQsIDIwMDAwKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKGxhenlzaXplcy5lbGVtZW50cy5sZW5ndGgpe1xuXHRcdFx0XHRcdGNoZWNrRWxlbWVudHMoKTtcblx0XHRcdFx0XHRyQUYuX2xzRmx1c2goKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aHJvdHRsZWRDaGVja0VsZW1lbnRzKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRjaGVja0VsZW1zOiB0aHJvdHRsZWRDaGVja0VsZW1lbnRzLFxuXHRcdFx0dW52ZWlsOiB1bnZlaWxFbGVtZW50LFxuXHRcdFx0X2FMU0w6IGFsdExvYWRtb2RlU2Nyb2xsTGlzdG5lcixcblx0XHR9O1xuXHR9KSgpO1xuXG5cblx0dmFyIGF1dG9TaXplciA9IChmdW5jdGlvbigpe1xuXHRcdHZhciBhdXRvc2l6ZXNFbGVtcztcblxuXHRcdHZhciBzaXplRWxlbWVudCA9IHJBRkl0KGZ1bmN0aW9uKGVsZW0sIHBhcmVudCwgZXZlbnQsIHdpZHRoKXtcblx0XHRcdHZhciBzb3VyY2VzLCBpLCBsZW47XG5cdFx0XHRlbGVtLl9sYXp5c2l6ZXNXaWR0aCA9IHdpZHRoO1xuXHRcdFx0d2lkdGggKz0gJ3B4JztcblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoJ3NpemVzJywgd2lkdGgpO1xuXG5cdFx0XHRpZihyZWdQaWN0dXJlLnRlc3QocGFyZW50Lm5vZGVOYW1lIHx8ICcnKSl7XG5cdFx0XHRcdHNvdXJjZXMgPSBwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NvdXJjZScpO1xuXHRcdFx0XHRmb3IoaSA9IDAsIGxlbiA9IHNvdXJjZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xuXHRcdFx0XHRcdHNvdXJjZXNbaV0uc2V0QXR0cmlidXRlKCdzaXplcycsIHdpZHRoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZighZXZlbnQuZGV0YWlsLmRhdGFBdHRyKXtcblx0XHRcdFx0dXBkYXRlUG9seWZpbGwoZWxlbSwgZXZlbnQuZGV0YWlsKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHQvKipcblx0XHQgKlxuXHRcdCAqIEBwYXJhbSBlbGVtIHtFbGVtZW50fVxuXHRcdCAqIEBwYXJhbSBkYXRhQXR0clxuXHRcdCAqIEBwYXJhbSBbd2lkdGhdIHsgbnVtYmVyIH1cblx0XHQgKi9cblx0XHR2YXIgZ2V0U2l6ZUVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YUF0dHIsIHdpZHRoKXtcblx0XHRcdHZhciBldmVudDtcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmKHBhcmVudCl7XG5cdFx0XHRcdHdpZHRoID0gZ2V0V2lkdGgoZWxlbSwgcGFyZW50LCB3aWR0aCk7XG5cdFx0XHRcdGV2ZW50ID0gdHJpZ2dlckV2ZW50KGVsZW0sICdsYXp5YmVmb3Jlc2l6ZXMnLCB7d2lkdGg6IHdpZHRoLCBkYXRhQXR0cjogISFkYXRhQXR0cn0pO1xuXG5cdFx0XHRcdGlmKCFldmVudC5kZWZhdWx0UHJldmVudGVkKXtcblx0XHRcdFx0XHR3aWR0aCA9IGV2ZW50LmRldGFpbC53aWR0aDtcblxuXHRcdFx0XHRcdGlmKHdpZHRoICYmIHdpZHRoICE9PSBlbGVtLl9sYXp5c2l6ZXNXaWR0aCl7XG5cdFx0XHRcdFx0XHRzaXplRWxlbWVudChlbGVtLCBwYXJlbnQsIGV2ZW50LCB3aWR0aCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciB1cGRhdGVFbGVtZW50c1NpemVzID0gZnVuY3Rpb24oKXtcblx0XHRcdHZhciBpO1xuXHRcdFx0dmFyIGxlbiA9IGF1dG9zaXplc0VsZW1zLmxlbmd0aDtcblx0XHRcdGlmKGxlbil7XG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRcdGZvcig7IGkgPCBsZW47IGkrKyl7XG5cdFx0XHRcdFx0Z2V0U2l6ZUVsZW1lbnQoYXV0b3NpemVzRWxlbXNbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBkZWJvdW5jZWRVcGRhdGVFbGVtZW50c1NpemVzID0gZGVib3VuY2UodXBkYXRlRWxlbWVudHNTaXplcyk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0XzogZnVuY3Rpb24oKXtcblx0XHRcdFx0YXV0b3NpemVzRWxlbXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGxhenlTaXplc0NmZy5hdXRvc2l6ZXNDbGFzcyk7XG5cdFx0XHRcdGFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGRlYm91bmNlZFVwZGF0ZUVsZW1lbnRzU2l6ZXMpO1xuXHRcdFx0fSxcblx0XHRcdGNoZWNrRWxlbXM6IGRlYm91bmNlZFVwZGF0ZUVsZW1lbnRzU2l6ZXMsXG5cdFx0XHR1cGRhdGVFbGVtOiBnZXRTaXplRWxlbWVudFxuXHRcdH07XG5cdH0pKCk7XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpe1xuXHRcdGlmKCFpbml0LmkgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSl7XG5cdFx0XHRpbml0LmkgPSB0cnVlO1xuXHRcdFx0YXV0b1NpemVyLl8oKTtcblx0XHRcdGxvYWRlci5fKCk7XG5cdFx0fVxuXHR9O1xuXG5cdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0XHRpZihsYXp5U2l6ZXNDZmcuaW5pdCl7XG5cdFx0XHRpbml0KCk7XG5cdFx0fVxuXHR9KTtcblxuXHRsYXp5c2l6ZXMgPSB7XG5cdFx0LyoqXG5cdFx0ICogQHR5cGUgeyBMYXp5U2l6ZXNDb25maWdQYXJ0aWFsIH1cblx0XHQgKi9cblx0XHRjZmc6IGxhenlTaXplc0NmZyxcblx0XHRhdXRvU2l6ZXI6IGF1dG9TaXplcixcblx0XHRsb2FkZXI6IGxvYWRlcixcblx0XHRpbml0OiBpbml0LFxuXHRcdHVQOiB1cGRhdGVQb2x5ZmlsbCxcblx0XHRhQzogYWRkQ2xhc3MsXG5cdFx0ckM6IHJlbW92ZUNsYXNzLFxuXHRcdGhDOiBoYXNDbGFzcyxcblx0XHRmaXJlOiB0cmlnZ2VyRXZlbnQsXG5cdFx0Z1c6IGdldFdpZHRoLFxuXHRcdHJBRjogckFGLFxuXHR9O1xuXG5cdHJldHVybiBsYXp5c2l6ZXM7XG59XG4pKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJpbXBvcnQgXCIuLi9zdHlsZXMvc3R5bGVzLmNzc1wiO1xyXG5pbXBvcnQgXCJsYXp5c2l6ZXNcIjtcclxuaW1wb3J0IE1vYmlsZU1lbnUgZnJvbSBcIi4vbW9kdWxlcy9Nb2JpbGVNZW51XCI7XHJcblxyXG5uZXcgTW9iaWxlTWVudSgpO1xyXG5cclxuLy8gcHJldmVudHMgZWxlbWVudHMgd2l0aCB0cmFuc2lzaXRpb24gZnJvbSBhcHBlYXJpbmcgb24gcGFnZSBsb2FkLlxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLGZ1bmN0aW9uKCl7XHJcbiAgbGV0IG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJlbG9hZC10cmFuc2l0aW9ucycpO1xyXG4gIG5vZGUuY2xhc3NMaXN0LnJlbW92ZSgncHJlbG9hZC10cmFuc2l0aW9ucycpO1xyXG59KTtcclxuXHJcblxyXG4vLyBhbGxvd3Mgd2VicGFjay1kZXYtc2VydmVyIHRvIGJlIGV4ZWN1dGVkIGJ5IGFsbG93aW5nIGhvdCBtb2R1bGUgcmVwbGFjZW1lbnRzIGFuZCBhY2NlcHRzIHVwZGF0ZXMgb24gdGhlIGZseVxyXG5pZiAobW9kdWxlLmhvdCkge1xyXG4gIG1vZHVsZS5ob3QuYWNjZXB0KCk7XHJcbn1cclxuIiwiY2xhc3MgTW9iaWxlTWVudSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLm92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm92ZXJsYXlcIik7XHJcbiAgICB0aGlzLm1haW5OYXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1haW4tbmF2XCIpO1xyXG4gICAgdGhpcy5tZW51SWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaGVhZGVyX19tZW51LWljb25cIik7XHJcbiAgICB0aGlzLmV2ZW50cygpO1xyXG4gIH1cclxuXHJcbiAgZXZlbnRzKCkge1xyXG4gICAgdGhpcy5tZW51SWNvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy50b2dnbGVUaGVNZW51KCkpO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlVGhlTWVudSgpIHtcclxuICAgIHRoaXMubWVudUljb24uY2xhc3NMaXN0LnRvZ2dsZShcImhlYWRlcl9fbWVudS1pY29uLS1jbG9zZS14XCIpO1xyXG5cclxuICAgIGlmICghdGhpcy5vdmVybGF5LmNsYXNzTGlzdC5jb250YWlucyhcIm92ZXJsYXktLWlzLW9wZW5cIikpIHtcclxuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XHJcbiAgICAgIHRoaXMub3ZlcmxheS5jbGFzc0xpc3QuYWRkKFwib3ZlcmxheS0taXMtb3BlblwiKTtcclxuICAgICAgdGhpcy5tYWluTmF2LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gXCJ2aXNpYmxlXCI7XHJcbiAgICAgIHRoaXMub3ZlcmxheS5jbGFzc0xpc3QucmVtb3ZlKFwib3ZlcmxheS0taXMtb3BlblwiKTtcclxuICAgICAgdGhpcy5tYWluTmF2LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1vYmlsZU1lbnU7XHJcbiJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJmYWN0b3J5IiwibGF6eVNpemVzIiwiZG9jdW1lbnQiLCJEYXRlIiwibGF6eXNpemVzIiwibGF6eVNpemVzQ2ZnIiwicHJvcCIsImxhenlTaXplc0RlZmF1bHRzIiwibGF6eUNsYXNzIiwibG9hZGVkQ2xhc3MiLCJsb2FkaW5nQ2xhc3MiLCJwcmVsb2FkQ2xhc3MiLCJlcnJvckNsYXNzIiwiYXV0b3NpemVzQ2xhc3MiLCJmYXN0TG9hZGVkQ2xhc3MiLCJpZnJhbWVMb2FkTW9kZSIsInNyY0F0dHIiLCJzcmNzZXRBdHRyIiwic2l6ZXNBdHRyIiwibWluU2l6ZSIsImN1c3RvbU1lZGlhIiwiaW5pdCIsImV4cEZhY3RvciIsImhGYWMiLCJsb2FkTW9kZSIsImxvYWRIaWRkZW4iLCJyaWNUaW1lb3V0IiwidGhyb3R0bGVEZWxheSIsImxhenlTaXplc0NvbmZpZyIsImxhenlzaXplc0NvbmZpZyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJjZmciLCJub1N1cHBvcnQiLCJhdXRvc2l6ZXNFbGVtcyIsInNpemVFbGVtZW50IiwiZ2V0U2l6ZUVsZW1lbnQiLCJkZWJvdW5jZWRVcGRhdGVFbGVtZW50c1NpemVzIiwicHJlbG9hZEVsZW1zIiwiaXNDb21wbGV0ZWQiLCJyZXNldFByZWxvYWRpbmdUaW1lciIsInN0YXJ0ZWQiLCJlTHZXIiwiZWx2SCIsImVMdG9wIiwiZUxsZWZ0IiwiZUxyaWdodCIsImVMYm90dG9tIiwiaXNCb2R5SGlkZGVuIiwicmVnSW1nIiwicmVnSWZyYW1lIiwic3VwcG9ydFNjcm9sbCIsImN1cnJlbnRFeHBhbmQiLCJpc0xvYWRpbmciLCJsb3dSdW5zIiwicmVzZXRQcmVsb2FkaW5nIiwiaXNWaXNpYmxlIiwiaXNOZXN0ZWRWaXNpYmxlIiwiY2hlY2tFbGVtZW50cyIsInRocm90dGxlZENoZWNrRWxlbWVudHMiLCJzd2l0Y2hMb2FkaW5nQ2xhc3MiLCJyYWZlZFN3aXRjaExvYWRpbmdDbGFzcyIsInJhZlN3aXRjaExvYWRpbmdDbGFzcyIsImNoYW5nZUlmcmFtZVNyYyIsImhhbmRsZVNvdXJjZXMiLCJsYXp5VW52ZWlsIiwidW52ZWlsRWxlbWVudCIsImFmdGVyU2Nyb2xsIiwiYWx0TG9hZG1vZGVTY3JvbGxMaXN0bmVyIiwib25sb2FkIiwicnVubmluZyIsIndhaXRpbmciLCJmaXJzdEZucyIsInNlY29uZEZucyIsImZucyIsInJ1biIsInJhZkJhdGNoIiwiZG9jRWxlbSIsImRvY3VtZW50RWxlbWVudCIsInN1cHBvcnRQaWN0dXJlIiwiSFRNTFBpY3R1cmVFbGVtZW50IiwiX2FkZEV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiYmluZCIsInNldFRpbWVvdXQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwicmVnUGljdHVyZSIsImxvYWRFdmVudHMiLCJyZWdDbGFzc0NhY2hlIiwiZm9yRWFjaCIsIkFycmF5IiwicHJvdG90eXBlIiwiaGFzQ2xhc3MiLCJlbGUiLCJjbHMiLCJSZWdFeHAiLCJ0ZXN0IiwiYWRkQ2xhc3MiLCJzZXRBdHRyaWJ1dGUiLCJ0cmltIiwicmVtb3ZlQ2xhc3MiLCJyZWciLCJyZXBsYWNlIiwiYWRkUmVtb3ZlTG9hZEV2ZW50cyIsImRvbSIsImZuIiwiYWRkIiwiYWN0aW9uIiwiZXZ0IiwidHJpZ2dlckV2ZW50IiwiZWxlbSIsIm5hbWUiLCJkZXRhaWwiLCJub0J1YmJsZXMiLCJub0NhbmNlbGFibGUiLCJldmVudCIsImNyZWF0ZUV2ZW50IiwiaW5zdGFuY2UiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwidXBkYXRlUG9seWZpbGwiLCJlbCIsImZ1bGwiLCJwb2x5ZmlsbCIsInBpY3R1cmVmaWxsIiwicGYiLCJzcmMiLCJyZWV2YWx1YXRlIiwiZWxlbWVudHMiLCJnZXRDU1MiLCJzdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRXaWR0aCIsInBhcmVudCIsIndpZHRoIiwib2Zmc2V0V2lkdGgiLCJfbGF6eXNpemVzV2lkdGgiLCJwYXJlbnROb2RlIiwickFGIiwicXVldWUiLCJhcHBseSIsInRoaXMiLCJhcmd1bWVudHMiLCJwdXNoIiwiaGlkZGVuIiwiX2xzRmx1c2giLCJydW5GbnMiLCJsZW5ndGgiLCJzaGlmdCIsInJBRkl0Iiwic2ltcGxlIiwidGhhdCIsImFyZ3MiLCJkZWJvdW5jZSIsImZ1bmMiLCJ0aW1lb3V0IiwidGltZXN0YW1wIiwibGF0ZXIiLCJsYXN0Iiwibm93IiwibG9hZGVyIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiZSIsInRhcmdldCIsImJvZHkiLCJlbGVtRXhwYW5kIiwib3V0ZXJSZWN0IiwidmlzaWJsZSIsIm9mZnNldFBhcmVudCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsImxhc3RUaW1lIiwiZ0RlbGF5IiwicklDVGltZW91dCIsImlkbGVDYWxsYmFjayIsImlzUHJpb3JpdHkiLCJkZWxheSIsInRocm90dGxlIiwiZUxsZW4iLCJpIiwicmVjdCIsImF1dG9Mb2FkRWxlbSIsImxvYWRlZFNvbWV0aGluZyIsImVsZW1OZWdhdGl2ZUV4cGFuZCIsImVsZW1FeHBhbmRWYWwiLCJiZWZvcmVFeHBhbmRWYWwiLCJkZWZhdWx0RXhwYW5kIiwicHJlbG9hZEV4cGFuZCIsImxhenlsb2FkRWxlbXMiLCJfbGF6eVJhY2UiLCJwcmVtYXR1cmVVbnZlaWwiLCJleHBhbmQiLCJjbGllbnRIZWlnaHQiLCJjbGllbnRXaWR0aCIsIl9kZWZFeCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInByZWxvYWRBZnRlckxvYWQiLCJfbGF6eUNhY2hlIiwiZ2V0QXR0cmlidXRlIiwiY29udGVudFdpbmRvdyIsImxvY2F0aW9uIiwic291cmNlIiwic291cmNlU3Jjc2V0IiwiaXNBdXRvIiwic2l6ZXMiLCJpc0ltZyIsInNyY3NldCIsImlzUGljdHVyZSIsImZpcmVzTG9hZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJub2RlTmFtZSIsImNsZWFyVGltZW91dCIsImNhbGwiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImlzTG9hZGVkIiwiY29tcGxldGUiLCJuYXR1cmFsV2lkdGgiLCJsb2FkaW5nIiwiYXV0b1NpemVyIiwidXBkYXRlRWxlbSIsIl8iLCJwZXJzaXN0ZWQiLCJsb2FkaW5nRWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW1nIiwiTXV0YXRpb25PYnNlcnZlciIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiYXR0cmlidXRlcyIsInNldEludGVydmFsIiwicmVhZHlTdGF0ZSIsImNoZWNrRWxlbXMiLCJ1bnZlaWwiLCJfYUxTTCIsInNvdXJjZXMiLCJsZW4iLCJkYXRhQXR0ciIsInVQIiwiYUMiLCJyQyIsImhDIiwiZmlyZSIsImdXIiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJNb2JpbGVNZW51Iiwib3ZlcmxheSIsInF1ZXJ5U2VsZWN0b3IiLCJtYWluTmF2IiwibWVudUljb24iLCJldmVudHMiLCJ0b2dnbGVUaGVNZW51IiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiY29udGFpbnMiLCJvdmVyZmxvdyIsInJlbW92ZSIsImRpc3BsYXkiXSwic291cmNlUm9vdCI6IiJ9