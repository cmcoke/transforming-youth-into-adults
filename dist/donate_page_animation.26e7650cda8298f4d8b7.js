(()=>{"use strict";var e,t={167:(e,t,r)=>{var o=r(358),n=r(92);function i(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}o.ZP.registerPlugin(n.Z),new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.hero=o.ZP.timeline(),this.secondSection=o.ZP.timeline({scrollTrigger:{trigger:"#donate-page-second-section",start:"top center"}}),this.footer=o.ZP.timeline({scrollTrigger:{trigger:"#donate-page-footer",start:"top 80%"}}),this.events()}var t,r;return t=e,(r=[{key:"events",value:function(){var e=this;window.addEventListener("load",(function(){return e.DonatePage()}))}},{key:"DonatePage",value:function(){this.hero.to("#donate-page-hero-title",{opacity:1},.5),this.secondSection.to("#donate-page-second-section",{opacity:1,duration:1}),this.footer.from("#donate-page-footer",{opacity:0})}}])&&i(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}())}},r={};function o(e){var n=r[e];if(void 0!==n)return n.exports;var i=r[e]={exports:{}};return t[e](i,i.exports,o),i.exports}o.m=t,e=[],o.O=(t,r,n,i)=>{if(!r){var a=1/0;for(f=0;f<e.length;f++){for(var[r,n,i]=e[f],s=!0,c=0;c<r.length;c++)(!1&i||a>=i)&&Object.keys(o.O).every((e=>o.O[e](r[c])))?r.splice(c--,1):(s=!1,i<a&&(a=i));if(s){e.splice(f--,1);var l=n();void 0!==l&&(t=l)}}return t}i=i||0;for(var f=e.length;f>0&&e[f-1][2]>i;f--)e[f]=e[f-1];e[f]=[r,n,i]},o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e={786:0};o.O.j=t=>0===e[t];var t=(t,r)=>{var n,i,[a,s,c]=r,l=0;if(a.some((t=>0!==e[t]))){for(n in s)o.o(s,n)&&(o.m[n]=s[n]);if(c)var f=c(o)}for(t&&t(r);l<a.length;l++)i=a[l],o.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return o.O(f)},r=self.webpackChunkwebpack_5_starter=self.webpackChunkwebpack_5_starter||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})();var n=o.O(void 0,[900],(()=>o(167)));n=o.O(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,